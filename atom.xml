<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://shuangliu1992.github.io</id>
    <title>ARTools</title>
    <updated>2020-04-08T19:04:29.323Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://shuangliu1992.github.io"/>
    <link rel="self" href="https://shuangliu1992.github.io/atom.xml"/>
    <subtitle>ARTools</subtitle>
    <logo>https://shuangliu1992.github.io/images/avatar.png</logo>
    <icon>https://shuangliu1992.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ARTools</rights>
    <entry>
        <title type="html"><![CDATA[Deformation Transfer]]></title>
        <id>https://shuangliu1992.github.io/post/deformation-transfer/</id>
        <link href="https://shuangliu1992.github.io/post/deformation-transfer/">
        </link>
        <updated>2020-03-23T06:17:54.000Z</updated>
        <content type="html"><![CDATA[<p>Deformation Transfer</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mesh Deformation]]></title>
        <id>https://shuangliu1992.github.io/post/mesh-deformation/</id>
        <link href="https://shuangliu1992.github.io/post/mesh-deformation/">
        </link>
        <updated>2020-03-19T01:49:36.000Z</updated>
        <content type="html"><![CDATA[<p>A small demo of As-Rigid-As-Possible (ARAP) deformation, Click load demo to run.</p>
<link rel="stylesheet" href="../../assets/w3.css">
  <button onclick="let s = document.createElement('iframe'); s.setAttribute('src','../../FaceWeb.html?program=deform_template&auto_start=1');s.style.width='100%';s.style.height='80vh';document.getElementById('iframe_host').appendChild(s); document.getElementById('load_demo').style.display='block';" class="w3-button w3-black">Load Demo</button>
  <div id="load_demo" class="w3-modal">
   <div class="w3-modal-content" style="position: fixed; top:10%; left: 10%; width: 80%; height: 80%">
      <div class="w3-container">
        <span onclick="document.getElementById('load_demo').style.display='none';document.getElementById('iframe_host').innerHTML='';" class="w3-button w3-black w3-display-topright">Close</span>
        <div id="iframe_host" style="width: 100%; height: 100%;"></div>
      </div>
    </div>
  </div>
<p>Controls: Hold Shift and left click to select an anchor point, hold Crtl to deform the mesh. Left button to drag the mesh, right button to rotate, scroll wheel to zoom.<br>
optional step:  By default the whole mesh is selected except for the largest boundary. You can click on select to choose region of interest.</p>
<p>To add more than one control anchor, click add/remove/update to update the currently selected anchor.</p>
<p>Check the option see instant feedback during dragging. Which is pretty slow for the default deformation method As-Rigid-As-Possible (ARAP). Without SSE WebAssembly the computation is quite heavy even for powerful CPUs. Try other simpler deformation methods in the dropdown list such as Biharmonic deformation.</p>
<p><video  src="../../test.mp4" type="video/mp4" width="640" height="480" controls><video></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pretending to be programming with Qt on the Web]]></title>
        <id>https://shuangliu1992.github.io/post/pretending-to-be-programming-with-qt-on-the-web/</id>
        <link href="https://shuangliu1992.github.io/post/pretending-to-be-programming-with-qt-on-the-web/">
        </link>
        <updated>2020-03-14T08:54:30.000Z</updated>
        <content type="html"><![CDATA[<p>Qt is a well established framework for GUI programming. Many inhouse tools have been created by people who works with C++ or Python a lot, for example researchers, pipeline developer etc. These tools are created to perform simple tasks that doesn't require fancy GUI. Not that you can't create fancy GUI with Qt, but frontend people usually prefer more flexible/dynamic and easier to use frameworks.</p>
<p>Imagine you have created a little tool that lets you deform a mesh on desktop with Qt like this:<br>
<video  src="../../qt_native_example.mp4" type="video/mp4" width="640" height="480" controls><br>
</video></p>
<p>Would it be nice to compile it and run it inside a browser so you don't need to install and compile Qt on every platform? Check out its web equivalent without changing a single line of code here: <a href="../mesh-deformation/">Mesh Deformation</a></p>
<p>Well it's actually quite simple to do so by implmenting a bunch of phony Qt classes that create html components that corresponds to the Qt widgets.</p>
<pre><code>#include &lt;emscripten.h&gt;
QLayout::QLayout(QObject *parent) {
    _parent = parent;
    EM_ASM(
        {
            var layout   = document.createElement('div');
            layout.style = 'display: grid; grid-gap: 10px; padding: 10px;';
            if ($1 == 0) {
                document.body.appendChild(layout);
            } else {
                window.widgets[$1].appendChild(layout);
            }
            window.widgets[$0] = layout;
        },
        this, parent);
}
</code></pre>
<p>Check out QtEmcc <a href="https://github.com/ShuangLiu1992/QtEMCC">https://github.com/ShuangLiu1992/QtEMCC</a> and build it with Emscripten with your app to try it out. Currently only a very limited set of widgets are implmeneted though.</p>
<p>There does exists libraries like: <a href="https://www.webtoolkit.eu/wt">https://www.webtoolkit.eu/wt</a>, which has been out for a while and seems very stable and promising. But the point of QtEMCC is to pretend to be Qt without having to use the heavey weight Qt Emscripten build, (which is rendered through webgl I believe), and instead directly use your Qt code and use native HTML widget to make the page lightweight. The &quot;HelloWorld&quot; <a href="https://www.qt.io/web-assembly-example-hello-window?hsCtaTracking=26c6f470-d1de-49f4-9ba8-ff4de3c1f240%7C87107b65-c127-49d6-8ff2-adf90492a5a9">https://www.qt.io/web-assembly-example-hello-window?hsCtaTracking=26c6f470-d1de-49f4-9ba8-ff4de3c1f240%7C87107b65-c127-49d6-8ff2-adf90492a5a9</a> Example from Qt is 8Mb, I doubt most users (especially on mobile) would have the patients for more heavy weight apps. Where examples apps (deform_template, mesh_simpification) with QtEMCC is only 100kb, with GUI components, mesh I/O and mesh deformation simplification algorithm combined.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mesh Simplification]]></title>
        <id>https://shuangliu1992.github.io/post/mesh-simplification-texture/</id>
        <link href="https://shuangliu1992.github.io/post/mesh-simplification-texture/">
        </link>
        <updated>2020-03-04T00:13:15.000Z</updated>
        <content type="html"><![CDATA[<p>Most of the time when we deploy 3D application we deliver a simplified version of the mesh rather than the raw mesh created by artists.</p>
<p>To simplify a mesh we collapse edges that are not very important. There are a couple of different weights and placement strategies. Click load demo to try it out.</p>
<p>You can decide which areas should be simplified more aggresively by clicking the paint button and paint weights. Area with heavier weights would be simplilifed more aggresively.</p>
<link rel="stylesheet" href="../../assets/w3.css">
  <button onclick="let s = document.createElement('iframe'); s.setAttribute('src','../../FaceWeb.html?program=decimate_obj&auto_start=1');s.style.width='100%';s.style.height='80vh';document.getElementById('iframe_host').appendChild(s); document.getElementById('load_demo').style.display='block';" class="w3-button w3-black">Load Demo</button>
  <div id="load_demo" class="w3-modal">
   <div class="w3-modal-content" style="position: fixed; top:10%; left: 10%; width: 80%; height: 80%">
      <div class="w3-container">
        <span onclick="document.getElementById('load_demo').style.display='none';document.getElementById('iframe_host').innerHTML='';" class="w3-button w3-black w3-display-topright">Close</span>
        <div id="iframe_host" style="width: 100%; height: 100%;"></div>
      </div>
    </div>
  </div>]]></content>
    </entry>
</feed>